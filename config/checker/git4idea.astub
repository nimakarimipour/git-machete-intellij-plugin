
import org.checkerframework.checker.guieffect.qual.PolyUIEffect;
import org.checkerframework.checker.guieffect.qual.PolyUIType;
import org.checkerframework.checker.guieffect.qual.UI;
import org.checkerframework.checker.nullness.qual.Nullable;
import edu.ucr.cs.riple.taint.ucrtainting.qual.RTainted;
import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;


package git4idea;

class GitVcs {
  void showErrors(List list, @RTainted String action);
}


package git4idea.branch;

interface GitBrancher {
  void checkout(String reference, boolean detach, List<? extends GitRepository> repositories, @UI Runnable callInAwtLater);

  void deleteBranches(Map<String, List<? extends GitRepository>> branchesToContainingRepositories, @UI Runnable callInAwtAfterExecution);
}

class GitNewBranchDialog {
  GitNewBranchDialog(Project project, Collection repositories, @RUntainted String dialogTitle, String initialName,
                     boolean showCheckOutOption, boolean showResetOption, boolean showSetTrackingOption);
}


package git4idea.fetch;

interface GitFetchResult {
  boolean showNotificationIfFailed(@RUntainted String title);
}


package git4idea.repo;

@PolyUIType
interface GitRepositoryChangeListener {
  @PolyUIEffect
  void repositoryChanged(GitRepository repository);
}


package git4idea.util;

class GitUntrackedFilesHelper {
  static void notifyUntrackedFilesOverwrittenBy(Project project, VirtualFile root, Collection<String> relativePaths,
                                                @RUntainted String operation, @RTainted @Nullable String description);
}
